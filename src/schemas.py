# src/schemas.py
from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional # Added Optional

# --- New Schemas for Agent Decisions ---
class HealthCheckDecision(BaseModel):
    """Decision structure for the health check node."""
    decision: str = Field(..., description="Either 'perform_check' or 'skip_check'")
    reason: str = Field(..., description="Brief reasoning for the decision.")

class RouterDecision(BaseModel):
    """Decision structure for the router node."""
    next_step: str = Field(..., description="The name of the next node to execute (e.g., 'planner', 'executor', 'synthesizer')")
    reason: str = Field(..., description="Brief reasoning for the routing decision.")

class EndpointDetail(BaseModel):
    """Details about a specific API endpoint relevant to a plan step."""
    method: Optional[str] = Field(None, description="HTTP method (e.g., GET, POST)")
    path: Optional[str] = Field(None, description="API endpoint path (e.g., /projects)")
    description: Optional[str] = Field(None, description="Brief description of the endpoint's purpose")
    parameters: List[Dict[str, Any]] = Field(default_factory=list, description="List of parameters (path, query, header, body)")
    example_request: Optional[Dict[str, Any]] = Field(None, description="Example JSON request body")
    example_response: Optional[Dict[str, Any]] = Field(None, description="Example JSON response body")

class CodeSnippet(BaseModel):
    """A code snippet in a specific language with explanation."""
    language: str = Field(default="python", description="Programming language of the snippet (e.g., python, curl)")
    snippet: str = Field(..., description="The actual code snippet") # ... means required
    explanation: str = Field(..., description="Brief explanation of what the code does")

class Step(BaseModel):
    """A single step in the agent's plan to fulfill the user query."""
    order: int = Field(..., description="Sequential order of the step (1, 2, 3...)")
    description: str = Field(..., description="Natural language description of the step's goal")
    endpoint: Optional[EndpointDetail] = Field(None, description="API endpoint details relevant to this step, if applicable")
    code_snippets: List[CodeSnippet] = Field(default_factory=list, description="Code snippets relevant to executing this step")

class PrioritizationScore(BaseModel):
    """PM prioritization score based on the query analysis."""
    pain_frequency: int = Field(..., ge=1, le=5, description="Estimated frequency (1-5, 5=high) this type of query/pain point occurs.")
    documentation_gap_score: int = Field(..., ge=1, le=5, description="Score (1-5, 5=high) indicating how well documentation covers this. High score = big gap.")
    systemic_risk: str = Field(..., description="Is this related to critical areas like Auth, Compliance, Performance? (Yes/No)")
    recommendation: str = Field(..., description="Actionable recommendation for the PM/Eng lead (e.g., 'Fix Documentation Gap', 'Monitor Usage', 'Prioritize Feature Build').")

class AgentResponse(BaseModel):
    """The final structured response from the API Co-Pilot agent."""
    query: str = Field(..., description="The original user query.")
    plan: Optional[List[Step]] = Field(default_factory=list, description="The multi-step plan generated by the agent, if applicable.")
    synthesized_explanation: str = Field(..., description="The final natural language explanation synthesizing the findings.")
    pm_prioritization: Optional[PrioritizationScore] = Field(None, description="The strategic prioritization score for the query.")
    api_status: Optional[Dict[str, Any]] = Field(None, description="Result of the API health check, if performed.")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Any additional metadata, like source document snippets used.")